var http={};http.send=function(t,e,n,i){var r=new XMLHttpRequest;r.onreadystatechange=function(){4==r.readyState&&i(r.status,r.responseText)},r.open(t,e,!0),r.send(n)},http.get=function(t,e){http.send("GET",t,null,e)},http.post=function(t,e,n){http.send("GET",t,e,n)};var pkzo={version:"0.0.1"};pkzo.AmbientFrag="precision highp float;\n\n\n\nuniform vec3      uColor;\n\nuniform sampler2D uTexture;\n\nuniform bool      uHasTexture;\n\n\n\nuniform vec3 uAmbientLight;\n\n\n\nvarying vec3 vNormal;\n\nvarying vec2 vTexCoord;\n\n\n\nvoid main()\n\n{\n\n    vec3 color = uColor;\n\n    \n\n    if (uHasTexture) {\n\n        color = color * texture2D(uTexture, vTexCoord).rgb;\n\n    }\n\n    \n\n    gl_FragColor = vec4(color * uAmbientLight, 1);\n\n}\n\n",pkzo.Inverse='/*\n\nThe MIT License (MIT)\n\n\n\nCopyright (c) 2014 Mikola Lysenko\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n\nof this software and associated documentation files (the "Software"), to deal\n\nin the Software without restriction, including without limitation the rights\n\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\ncopies of the Software, and to permit persons to whom the Software is\n\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\n\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\nTHE SOFTWARE.\n\n*/\n\n\n\nmat2 inverse(mat2 m) {\n\n  return mat2(m[1][1],-m[0][1],\n\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n\n}\n\n\n\nmat3 inverse(mat3 m) {\n\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n\n\n  float b01 = a22 * a11 - a12 * a21;\n\n  float b11 = -a22 * a10 + a12 * a20;\n\n  float b21 = a21 * a10 - a11 * a20;\n\n\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n\n}\n\n\n\nmat4 inverse(mat4 m) {\n\n  float\n\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n\n\n      b00 = a00 * a11 - a01 * a10,\n\n      b01 = a00 * a12 - a02 * a10,\n\n      b02 = a00 * a13 - a03 * a10,\n\n      b03 = a01 * a12 - a02 * a11,\n\n      b04 = a01 * a13 - a03 * a11,\n\n      b05 = a02 * a13 - a03 * a12,\n\n      b06 = a20 * a31 - a21 * a30,\n\n      b07 = a20 * a32 - a22 * a30,\n\n      b08 = a20 * a33 - a23 * a30,\n\n      b09 = a21 * a32 - a22 * a31,\n\n      b10 = a21 * a33 - a23 * a31,\n\n      b11 = a22 * a33 - a23 * a32,\n\n\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n\n\n  return mat4(\n\n      a11 * b11 - a12 * b10 + a13 * b09,\n\n      a02 * b10 - a01 * b11 - a03 * b09,\n\n      a31 * b05 - a32 * b04 + a33 * b03,\n\n      a22 * b04 - a21 * b05 - a23 * b03,\n\n      a12 * b08 - a10 * b11 - a13 * b07,\n\n      a00 * b11 - a02 * b08 + a03 * b07,\n\n      a32 * b02 - a30 * b05 - a33 * b01,\n\n      a20 * b05 - a22 * b02 + a23 * b01,\n\n      a10 * b10 - a11 * b08 + a13 * b06,\n\n      a01 * b08 - a00 * b10 - a03 * b06,\n\n      a30 * b04 - a31 * b02 + a33 * b00,\n\n      a21 * b02 - a20 * b04 - a23 * b00,\n\n      a11 * b07 - a10 * b09 - a12 * b06,\n\n      a00 * b09 - a01 * b07 + a02 * b06,\n\n      a31 * b01 - a30 * b03 - a32 * b00,\n\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n\n}\n\n',pkzo.LightFrag="precision highp float;\n\n\n\nuniform vec3      uColor;\n\nuniform bool      uHasTexture;\n\nuniform sampler2D uTexture;\n\nuniform float     uRoughness;\n\nuniform bool      uHasRoughnessMap;\n\nuniform sampler2D uRoughnessMap;\n\nuniform bool      uHasNormalMap;\n\nuniform sampler2D uNormalMap;\n\n\n\nuniform int   uLightType; // 1: directional, 2: point, 3: spot\n\nuniform vec3  uLightColor;\n\nuniform vec3  uLightDirection;\n\nuniform vec3  uLightPosition;\n\nuniform float uLightRange;\n\nuniform float uLightCutoff;\n\n\n\nvarying vec3 vNormal;\n\nvarying vec2 vTexCoord;\n\nvarying vec3 vPosition;\n\nvarying vec3 vEye;\n\nvarying mat3 vTBN;\n\n\n\nvoid main() {\n\n    vec3 color = uColor;    \n\n    if (uHasTexture) {\n\n        color = color * texture2D(uTexture, vTexCoord).rgb;\n\n    }\n\n    \n\n    vec3 normal;\n\n    if (uHasNormalMap) {\n\n        normal = normalize(vTBN * texture2D(uNormalMap, vTexCoord).rgb);\n\n    }\n\n    else {\n\n        normal = normalize(vNormal);        \n\n    }\n\n    \n\n    vec3 lightDirection;\n\n    float atten;\n\n    if (uLightType == 1) {\n\n        lightDirection = normalize(-uLightDirection);\n\n        atten = 1.0;\n\n    }\n\n    if (uLightType == 2) {\n\n        lightDirection = uLightPosition - vPosition;\n\n        float dist = length(lightDirection);\n\n        if (dist > uLightRange) {\n\n            discard;\n\n        }\n\n        lightDirection = normalize(lightDirection);\n\n        atten = 1.0 - (dist / uLightRange);    \n\n    }\n\n    if (uLightType == 3) {\n\n        lightDirection = uLightPosition - vPosition;\n\n        float dist = length(lightDirection);\n\n        if (dist > uLightRange) {\n\n            discard;\n\n        }\n\n        lightDirection = normalize(lightDirection);\n\n        atten = 1.0 - (dist / uLightRange);    \n\n        \n\n        if (dot(lightDirection, -uLightDirection) < uLightCutoff) {\n\n            discard;\n\n        }  \n\n    }\n\n    \n\n    vec3 result = vec3(0);    \n\n    float nDotL = dot(normal, lightDirection);\n\n    if (nDotL > 0.0) {    \n\n        result += nDotL * color * uLightColor * atten;\n\n        \n\n        vec3 eye = normalize(vEye);\n\n        vec3 reflection = reflect(normal, lightDirection);\n\n        float shininess = 1.0 - uRoughness;\n\n        if (uHasRoughnessMap) {\n\n            shininess = shininess * (1.0 - texture2D(uRoughnessMap, vTexCoord).r);\n\n        }        \n\n\n\n        float eDotR = dot(eye, reflection);	\n\n        if (eDotR > 0.0)\n\n        {\n\n            // 0-1 -> 0-128\n\n            float si = pow(eDotR, shininess * 128.0);\n\n            result += uLightColor * vec3(shininess)  * si;\n\n        }\n\n    }\n\n            \n\n    gl_FragColor = vec4(result, 1.0);\n\n}                           \n\n",pkzo.ParticleFrag="precision highp float;\n\n\n\nuniform vec3  uColor;\n\nuniform float uTransparency;\n\nuniform sampler2D uTexture;\n\nuniform bool uHasTexture;\n\n\n\nvarying vec2 vTexCoord;\n\n\n\nvoid main()\n\n{\n\n    if (uHasTexture) {\n\n        gl_FragColor = texture2D(uTexture, vTexCoord) * vec4(uColor, 1.0 - uTransparency);\n\n    }\n\n    else {\n\n        gl_FragColor = vec4(uColor, 1.0 - uTransparency);\n\n    }\n\n}",pkzo.ParticleVert="precision highp float;\n\n\n\nuniform mat4 uProjectionMatrix;\n\nuniform mat4 uViewMatrix;\n\nuniform mat4 uModelMatrix;\n\nuniform float uSize;\n\n\n\nattribute vec3 aVertex;\n\nattribute vec2 aTexCoord;\n\n\n\nvarying vec2 vTexCoord;\n\n\n\nvoid main() {\n\n  mat4 modelView = uViewMatrix * uModelMatrix ;\n\n  modelView[0] = vec4(uSize, 0, 0, 0);\n\n  modelView[1] = vec4(0, uSize, 0, 0);\n\n  modelView[2] = vec4(0, 0, uSize, 0);\n\n  \n\n  vTexCoord = aTexCoord;\n\n    \n\n  gl_Position = uProjectionMatrix * modelView * vec4(aVertex, 1);\n\n}",pkzo.SkyBoxFrag="precision highp float;\n\n\n\nuniform samplerCube uCubemap;\n\n\n\nvarying vec3 vDirection;\n\n\n\nvoid main()\n\n{\n\n    gl_FragColor = textureCube(uCubemap, vDirection);\n\n}\n\n",pkzo.SkyBoxVert="precision highp float;\n\n\n\nuniform mat4 uProjectionMatrix;\n\nuniform mat4 uViewMatrix;\n\n\n\nattribute vec3 aVertex;\n\n\n\nvarying vec3 vDirection;\n\n\n\nvoid main()\n\n{\n\n    vec4 vertex            = vec4(aVertex, 1);\n\n    mat4 inverseProjection = inverse(uProjectionMatrix);\n\n    mat3 inverseView       = inverse(mat3(uViewMatrix));\n\n    vec3 unprojected       = (inverseProjection * vertex).xyz;\n\n    \n\n    vDirection  = inverseView * unprojected;\n\n    gl_Position = vertex;\n\n}",pkzo.SolidFrag="precision highp float;\n\n\n\nuniform vec3 uColor;\n\nuniform sampler2D uTexture;\n\nuniform bool uHasTexture;\n\n\n\nvarying vec3 vNormal;\n\nvarying vec2 vTexCoord;\n\n\n\nvoid main()\n\n{\n\n    if (uHasTexture) {\n\n        gl_FragColor = texture2D(uTexture, vTexCoord) * vec4(uColor, 1);\n\n    }\n\n    else {\n\n        gl_FragColor = vec4(uColor, 1);\n\n    }\n\n}",pkzo.SolidVert="precision highp float;\n\n\n\nuniform mat4 uProjectionMatrix;\n\nuniform mat4 uViewMatrix;\n\nuniform mat4 uModelMatrix;\n\nuniform mat3 uNormalMatrix;\n\n\n\nattribute vec3 aVertex;\n\nattribute vec3 aNormal;\n\nattribute vec2 aTexCoord;\n\nattribute vec3 aTangent;\n\n\n\nvarying vec3 vNormal;\n\nvarying vec2 vTexCoord;\n\nvarying vec3 vPosition;\n\nvarying vec3 vEye;\n\nvarying mat3 vTBN;\n\n\n\nvoid main() {\n\n  vec3 n = normalize(uNormalMatrix * aNormal);\n\n  vec3 t = normalize(uNormalMatrix * aTangent);\n\n  vec3 b = normalize(cross(n, t));\n\n    \n\n  vNormal     = n;\n\n  vTexCoord   = aTexCoord;\n\n  vPosition   = vec3(uModelMatrix * vec4(aVertex, 1.0));\n\n  \n\n  vEye        = mat3(uViewMatrix) * -aVertex;\n\n  vTBN        = mat3(t, b, n);\n\n  \n\n  gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aVertex, 1);\n\n}",pkzo.Transpose="\n\nmat2 tanspose(mat2 m) {\n\n  mat2 r;\n\n  for (int i = 0; i < 2; i++) {\n\n    for (int j = 0; j < 2; j++) {\n\n       r[i][j] = m[j][i];\n\n    }\n\n  }\n\n  return r;\n\n}\n\n\n\nmat3 tanspose(mat3 m) {\n\n  mat3 r;\n\n  for (int i = 0; i < 3; i++) {\n\n    for (int j = 0; j < 3; j++) {\n\n       r[i][j] = m[j][i];\n\n    }\n\n  }\n\n  return r;\n\n}\n\n\n\nmat4 tanspose(mat4 m) {\n\n  mat4 r;\n\n  for (int i = 0; i < 4; i++) {\n\n    for (int j = 0; j < 4; j++) {\n\n       r[i][j] = m[j][i];\n\n    }\n\n  }\n\n  return r;\n\n}\n\n",pkzo.vec2=function(t,e){return new Float32Array("number"==typeof t&&"undefined"==typeof e?[t,t]:"number"==typeof t&&"number"==typeof e?[t,e]:2)},pkzo.vec3=function(t,e,n){return new Float32Array("number"==typeof t&&"undefined"==typeof e&&"undefined"==typeof n?[t,t,t]:"number"==typeof t&&"number"==typeof e&&"number"==typeof n?[t,e,n]:3)},pkzo.vec4=function(t,e,n,i){return new Float32Array("number"==typeof t&&"undefined"==typeof e&&"undefined"==typeof n&&"undefined"==typeof v3?[t,t,t,t]:"number"==typeof t&&"number"==typeof e&&"number"==typeof n&&"number"==typeof v3?[t,e,n,i]:4)},pkzo.neg=function(t){for(var e=new Float32Array(t.length),n=0;n<t.length;n++)e[n]=-t[n];return e},pkzo.add=function(t,e){for(var n=new Float32Array(t.length),i=0;i<t.length;i++)n[i]=t[i]+e[i];return n},pkzo.sub=function(t,e){for(var n=new Float32Array(t.length),i=0;i<t.length;i++)n[i]=t[i]-e[i];return n},pkzo.dot=function(t,e){for(var n=0,i=0;i<t.length;i++)n+=t[i]*e[i];return n},pkzo.cross=function(t,e){var n=new Float32Array(3);return n[0]=t[1]*e[2]-t[2]*e[1],n[1]=t[2]*e[0]-t[0]*e[2],n[2]=t[0]*e[1]-t[1]*e[0],n},pkzo.svmult=function(t,e){for(var n=new Float32Array(t.length),i=0;i<t.length;i++)n[i]=t[i]*e;return n},pkzo.length=function(t){return Math.sqrt(pkzo.dot(t,t))},pkzo.normalize=function(t){return pkzo.svmult(t,1/pkzo.length(t))},pkzo.multMatrixVector=function(t,e){for(var n=e.length,i=new Float32Array(n),r=0;n>r;r++){i[r]=0;for(var o=0;n>o;o++)i[r]+=t[r*n+o]*e[o]}return i},pkzo.midpoint=function(t,e){var n=pkzo.sub(e,t);return m=pkzo.add(t,pkzo.svmult(n,.5)),m},pkzo.mat3=function(t){if(t&&t.length&&16==t.length)return new Float32Array([t[0],t[1],t[2],t[4],t[5],t[6],t[8],t[9],t[10]]);if(t&&t.length){if(9!=t.length)throw new Error("mat3 must be 9 values");return new Float32Array(t)}return new Float32Array("number"==typeof t?[t,0,0,0,t,0,0,0,t]:[1,0,0,0,1,0,0,0,1])},pkzo.mat4=function(t){if(t&&t.length){if(16!=t.length)throw new Error("mat4 must be 16 values");return new Float32Array(t)}return new Float32Array("number"==typeof t?[t,0,0,0,0,t,0,0,0,0,t,0,0,0,0,t]:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])},pkzo.multMatrix=function(t,e){for(var n=Math.sqrt(t.length),i=new Float32Array(t.length),r=0;n>r;r++)for(var o=0;n>o;o++){for(var a=0,s=0;n>s;s++)a+=t[r*n+s]*e[s*n+o];i[r*n+o]=a}return i},pkzo.radians=function(t){return t*Math.PI/180},pkzo.degrees=function(t){return 180*t/Math.PI},pkzo.ortho=function(t,e,n,i,r,o){var a=e-t,s=i-n,h=o-r,p=pkzo.mat4();return p[0]=2/a,p[1]=0,p[2]=0,p[3]=0,p[4]=0,p[5]=2/s,p[6]=0,p[7]=0,p[8]=0,p[9]=0,p[10]=-2/h,p[11]=0,p[12]=-(t+e)/a,p[13]=-(i+n)/s,p[14]=-(o+r)/h,p[15]=1,p},pkzo.frustum=function(t,e,n,i,r,o){var a=2*r,s=e-t,h=i-n,p=o-r,u=new Float32Array(16);return u[0]=a/s,u[4]=0,u[8]=(e+t)/s,u[12]=0,u[1]=0,u[5]=a/h,u[9]=(i+n)/h,u[13]=0,u[2]=0,u[6]=0,u[10]=(-o-r)/p,u[14]=-a*o/p,u[3]=0,u[7]=0,u[11]=-1,u[15]=0,u},pkzo.perspective=function(t,e,n,i){var r=n*Math.tan(pkzo.radians(t)),o=r*e;return pkzo.frustum(-o,o,-r,r,n,i)},pkzo.translate=function(t,e,n,i){var r=pkzo.mat4(t);return r[12]=t[0]*e+t[4]*n+t[8]*i+t[12],r[13]=t[1]*e+t[5]*n+t[9]*i+t[13],r[14]=t[2]*e+t[6]*n+t[10]*i+t[14],r[15]=t[3]*e+t[7]*n+t[11]*i+t[15],r},pkzo.rotate=function(t,e,n,i,r){var o=pkzo.radians(e),a=Math.cos(o),s=Math.sin(o),h=Math.sqrt(n*n+i*i+r*r),p=n/h,u=i/h,l=r/h,c=p*(1-a),f=u*(1-a),d=l*(1-a),g=pkzo.mat4(1);g[0]=a+c*p,g[1]=0+c*u+s*l,g[2]=0+c*l-s*u,g[4]=0+f*p-s*l,g[5]=a+f*u,g[6]=0+f*l+s*p,g[8]=0+d*p+s*u,g[9]=0+d*u-s*p,g[10]=a+d*l;var m=pkzo.multMatrix(t,g);return m[12]=t[12],m[13]=t[13],m[14]=t[14],m[15]=t[15],m},pkzo.scale=function(t,e,n,i){var r=pkzo.mat4(1);return r[0]=t[0]*e,r[1]=t[1]*e,r[2]=t[2]*e,r[3]=t[3]*e,r[4]=t[4]*n,r[5]=t[5]*n,r[6]=t[6]*n,r[7]=t[7]*n,r[8]=t[8]*i,r[9]=t[9]*i,r[10]=t[10]*i,r[11]=t[11]*i,r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15],r},pkzo.transpose=function(t){for(var e=Math.sqrt(t.length),n=new Float32Array(t.length),i=0;e>i;i++)for(var r=0;e>r;r++)n[r*e+i]=t[i*e+r];return n},pkzo.Canvas=function(t){this.canvas="string"==typeof t?document.getElementById(t):t,this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.gl=this.canvas.getContext("webgl",{antialias:!0,depth:!0}),this.gl.clearColor(0,0,0,1),this.gl.width=this.canvas.width,this.gl.height=this.canvas.height},pkzo.Canvas.prototype.init=function(t){t&&t.call(this,this.gl)},pkzo.Canvas.prototype.draw=function(t){(this.canvas.width!=this.canvas.clientWidth||this.canvas.height!=this.canvas.clientHeight)&&(this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.gl.width=this.canvas.width,this.gl.height=this.canvas.height),this.gl.viewport(0,0,this.canvas.width,this.canvas.height),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),t&&t.call(this,this.gl)},pkzo.Texture=function(t){this.url=t,this.image=null,this.loaded=!1,this.load()},pkzo.Texture.load=function(t){return new pkzo.Texture(t)},pkzo.Texture.prototype.load=function(){this.image=new Image;var t=this;this.image.onload=function(){t.loaded=!0},this.image.src=this.url},pkzo.Texture.prototype.upload=function(){if(!this.loaded)throw Error("Can not upload texture that is not loaded yet.");this.id=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this.id),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.image),this.gl.generateMipmap(this.gl.TEXTURE_2D),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR_MIPMAP_LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.REPEAT),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.REPEAT)},pkzo.Texture.prototype.release=function(){this.gl.deleteTexture(this.id),this.id=null},pkzo.Texture.prototype.bind=function(t,e){this.gl=t,this.gl.activeTexture(t.TEXTURE0+e),this.loaded?this.id?this.gl.bindTexture(this.gl.TEXTURE_2D,this.id):this.upload():this.gl.bindTexture(this.gl.TEXTURE_2D,0)},pkzo.CubeMap=function(){this.loaded=!1},pkzo.CubeMap.load=function(t){var e=new pkzo.CubeMap;return e.load(t),e},pkzo.CubeMap.prototype.load=function(t){var e=this;this.loadCount=0;var n=function(){e.loadCount++,6==e.loadCount&&(e.loaded=!0)};this.xposImage=new Image,this.xposImage.onload=n,this.xposImage.src=t.xpos,this.xnegImage=new Image,this.xnegImage.onload=n,this.xnegImage.src=t.xneg,this.yposImage=new Image,this.yposImage.onload=n,this.yposImage.src=t.ypos,this.ynegImage=new Image,this.ynegImage.onload=n,this.ynegImage.src=t.yneg,this.zposImage=new Image,this.zposImage.onload=n,this.zposImage.src=t.zpos,this.znegImage=new Image,this.znegImage.onload=n,this.znegImage.src=t.zneg},pkzo.CubeMap.prototype.upload=function(){if(!this.loaded)throw Error("Can not upload texture that is not loaded yet.");this.id=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,this.id),this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.xposImage),this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_NEGATIVE_X,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.xnegImage),this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_Y,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.yposImage),this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.ynegImage),this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_Z,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.zposImage),this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.znegImage),this.gl.texParameteri(this.gl.TEXTURE_CUBE_MAP,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_CUBE_MAP,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_CUBE_MAP,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_CUBE_MAP,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE)},pkzo.CubeMap.prototype.release=function(){this.gl.deleteTexture(this.id),this.id=null},pkzo.CubeMap.prototype.bind=function(t,e){this.gl=t,this.gl.activeTexture(t.TEXTURE0+e),this.loaded?this.id?this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,this.id):this.upload():this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,0)},pkzo.Shader=function(t,e,n){this.gl=t,this.vertexCode=e,this.fragmentCode=n},pkzo.Shader.prototype.compile=function(){var t=this.compileShader(this.gl.VERTEX_SHADER,this.vertexCode),e=this.compileShader(this.gl.FRAGMENT_SHADER,this.fragmentCode),n=this.gl.createProgram();this.gl.attachShader(n,t),this.gl.attachShader(n,e),this.gl.linkProgram(n);var i=this.gl.getProgramInfoLog(n);if(this.gl.getProgramParameter(n,this.gl.LINK_STATUS)===!1)throw new Error(i);""!==i&&console.log(i),this.gl.deleteShader(t),this.gl.deleteShader(e),this.id=n},pkzo.Shader.prototype.compileShader=function(t,e){var n=this.gl.createShader(t);this.gl.shaderSource(n,e),this.gl.compileShader(n);var i=this.gl.getShaderInfoLog(n);if(this.gl.getShaderParameter(n,this.gl.COMPILE_STATUS)===!1)throw new Error(i);return""!==i&&console.log(i),n},pkzo.Shader.prototype.release=function(){this.gl.deleteProgram(id)},pkzo.Shader.prototype.bind=function(){this.id||this.compile(),this.gl.useProgram(this.id)},pkzo.Shader.prototype.setArrtibute=function(t,e,n){if(e.bind(),void 0===n)var n=e.elementSize;var i=this.gl.getAttribLocation(this.id,t);-1!=i&&(this.gl.enableVertexAttribArray(i),this.gl.vertexAttribPointer(i,n,e.elementType,this.gl.FALSE,0,0))},pkzo.Shader.prototype.setUniform1i=function(t,e){var n=this.gl.getUniformLocation(this.id,t);-1!=n&&this.gl.uniform1i(n,e)},pkzo.Shader.prototype.setUniform1f=function(t,e){var n=this.gl.getUniformLocation(this.id,t);-1!=n&&this.gl.uniform1f(n,e)},pkzo.Shader.prototype.setUniform2fv=function(t,e){var n=this.gl.getUniformLocation(this.id,t);-1!=n&&this.gl.uniform2f(n,e[0],e[1])},pkzo.Shader.prototype.setUniform3fv=function(t,e){var n=this.gl.getUniformLocation(this.id,t);-1!=n&&this.gl.uniform3f(n,e[0],e[1],e[2])},pkzo.Shader.prototype.setUniform4fv=function(t,e){var n=this.gl.getUniformLocation(this.id,t);-1!=n&&this.gl.uniform4f(n,e[0],e[1],e[2],e[4])},pkzo.Shader.prototype.setUniformMatrix3fv=function(t,e,n){if(void 0===n||null===n)var n=!1;var i=this.gl.getUniformLocation(this.id,t);-1!=i&&this.gl.uniformMatrix3fv(i,n,e)},pkzo.Shader.prototype.setUniformMatrix4fv=function(t,e,n){if(void 0===n||null===n)var n=!1;var i=this.gl.getUniformLocation(this.id,t);-1!=i&&this.gl.uniformMatrix4fv(i,n,e)},pkzo.Scene=function(){this.ambientLight=pkzo.vec3(.2,.2,.2)},pkzo.Scene.prototype.enqueue=function(t){this.entities&&this.entities.forEach(function(e){e.enqueue(t)})},pkzo.Scene.prototype.add=function(t){this.entities?this.entities.push(t):this.entities=[t]},pkzo.Buffer=function(t,e,n,i){this.gl=t,this.type=void 0===n?t.ARRAY_BUFFER:n,this.elementType=void 0===i?this.type==t.ARRAY_BUFFER?t.FLOAT:t.UNSIGNED_SHORT:i,this.load(e)},pkzo.wrapArray=function(t,e,n){switch(e){case t.FLOAT:return new Float32Array(n);case t.DOUBLE:return new Float64Array(n);case t.UNSIGNED_BYTE:return new Uint8Array(n);case t.UNSIGNED_SHORT:return new Uint16Array(n);case t.UNSIGNED_INT:return new Uint32Array(n);case t.BYTE:return new Int8Array(n);case t.SHORT:return new Int16Array(n);case t.INT:return new Int32Array(n)}},pkzo.Buffer.prototype.load=function(t){if(void 0===t[0].length)this.elementSize=1,this.data=pkzo.wrapArray(this.gl,this.elementType,t);else{this.elementSize=t[0].length,this.data=pkzo.wrapArray(this.gl,this.elementType,t.length*this.elemSize);var e=0,n=this;t.forEach(function(t){t.forEach(function(t){n.data[e]=t,e++})})}},pkzo.Buffer.prototype.upload=function(){this.id=this.gl.createBuffer(),this.gl.bindBuffer(this.type,this.id),this.gl.bufferData(this.type,this.data,this.gl.STATIC_DRAW)},pkzo.Buffer.prototype.release=function(){this.id&&(this.gl.deleteBuffer(this.id),this.id=null)},pkzo.Buffer.prototype.bind=function(t){this.id||this.upload(),this.gl.bindBuffer(this.type,this.id)},pkzo.Buffer.prototype.draw=function(t){this.bind(),this.gl.drawElements(t,this.data.length,this.elementType,0)},pkzo.PlyParser=function(){function t(t,e){function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n}function e(t,e,n,i,r,o){this.message=t,this.expected=e,this.found=n,this.offset=i,this.line=r,this.column=o,this.name="SyntaxError"}function n(t){function n(e){function n(e,n,i){var r,o;for(r=n;i>r;r++)o=t.charAt(r),"\n"===o?(e.seenCR||e.line++,e.column=1,e.seenCR=!1):"\r"===o||"\u2028"===o||"\u2029"===o?(e.line++,e.column=1,e.seenCR=!0):(e.column++,e.seenCR=!1)}return Qt!==e&&(Qt>e&&(Qt=0,$t={line:1,column:1,seenCR:!1}),n($t,Qt,e),Qt=e),$t}function i(t){te>Kt||(Kt>te&&(te=Kt,ee=[]),ee.push(t))}function r(i,r,o){function a(t){var e=1;for(t.sort(function(t,e){return t.description<e.description?-1:t.description>e.description?1:0});e<t.length;)t[e-1]===t[e]?t.splice(e,1):e++}function s(t,e){function n(t){function e(t){return t.charCodeAt(0).toString(16).toUpperCase()}return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g,function(t){return"\\x0"+e(t)}).replace(/[\x10-\x1F\x80-\xFF]/g,function(t){return"\\x"+e(t)}).replace(/[\u0180-\u0FFF]/g,function(t){return"\\u0"+e(t)}).replace(/[\u1080-\uFFFF]/g,function(t){return"\\u"+e(t)})}var i,r,o,a=new Array(t.length);for(o=0;o<t.length;o++)a[o]=t[o].description;return i=t.length>1?a.slice(0,-1).join(", ")+" or "+a[t.length-1]:a[0],r=e?'"'+n(e)+'"':"end of input","Expected "+i+" but "+r+" found."}var h=n(o),p=o<t.length?t.charAt(o):null;return null!==r&&a(r),new e(null!==i?i:s(r,p),r,p,o,h.line,h.column)}function o(){var t,e,n,i;return t=Kt,e=a(),e!==R?(n=s(),n!==R?(i=v(),i!==R?(e=[e,n,i],t=e):(Kt=t,t=C)):(Kt=t,t=C)):(Kt=t,t=C),t}function a(){var e,n,r;return e=Kt,t.substr(Kt,3)===I?(n=I,Kt+=3):(n=R,0===ne&&i(P)),n!==R?(r=T(),r!==R?(n=[n,r],e=n):(Kt=e,e=C)):(Kt=e,e=C),e}function s(){var e,n,r,o,a,s;if(e=Kt,n=h(),n!==R){for(r=[],o=p();o!==R;)r.push(o),o=p();if(r!==R){if(o=[],a=u(),a!==R)for(;a!==R;)o.push(a),a=u();else o=C;o!==R?(t.substr(Kt,10)===U?(a=U,Kt+=10):(a=R,0===ne&&i(_)),a!==R?(s=T(),s!==R?(n=[n,r,o,a,s],e=n):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)}else Kt=e,e=C}else Kt=e,e=C;return e}function h(){var e,n,r,o,a,s,h;return e=Kt,t.substr(Kt,6)===L?(n=L,Kt+=6):(n=R,0===ne&&i(B)),n!==R?(r=x(),r!==R?(t.substr(Kt,5)===N?(o=N,Kt+=5):(o=R,0===ne&&i(D)),o!==R?(a=x(),a!==R?(t.substr(Kt,3)===F?(s=F,Kt+=3):(s=R,0===ne&&i(O)),s!==R?(h=T(),h!==R?(n=[n,r,o,a,s,h],e=n):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C),e}function p(){var e,n,r,o;if(e=Kt,t.substr(Kt,7)===V?(n=V,Kt+=7):(n=R,0===ne&&i(H)),n!==R){for(r=[],G.test(t.charAt(Kt))?(o=t.charAt(Kt),Kt++):(o=R,0===ne&&i(j));o!==R;)r.push(o),G.test(t.charAt(Kt))?(o=t.charAt(Kt),Kt++):(o=R,0===ne&&i(j));r!==R?(o=T(),o!==R?(n=[n,r,o],e=n):(Kt=e,e=C)):(Kt=e,e=C)}else Kt=e,e=C;return e}function u(){var t,e,n,i;if(t=Kt,e=l(),e!==R){if(n=[],i=f(),i!==R)for(;i!==R;)n.push(i),i=f();else n=C;n!==R?(Jt=t,e=X(e,n),t=e):(Kt=t,t=C)}else Kt=t,t=C;return t}function l(){var e,n,r,o,a,s,h;return e=Kt,t.substr(Kt,7)===Y?(n=Y,Kt+=7):(n=R,0===ne&&i(q)),n!==R?(r=x(),r!==R?(o=c(),o!==R?(a=x(),a!==R?(s=y(),s!==R?(h=T(),h!==R?(Jt=e,n=W(o,s),e=n):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C),e}function c(){var e;return t.substr(Kt,6)===Z?(e=Z,Kt+=6):(e=R,0===ne&&i(K)),e===R&&(t.substr(Kt,4)===J?(e=J,Kt+=4):(e=R,0===ne&&i(Q))),e}function f(){var e,n,r,o,a,s,h;return e=Kt,t.substr(Kt,8)===$?(n=$,Kt+=8):(n=R,0===ne&&i(tt)),n!==R?(r=x(),r!==R?(o=d(),o!==R?(a=x(),a!==R?(s=m(),s!==R?(h=T(),h!==R?(Jt=e,n=et(s),e=n):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C),e}function d(){var e;return t.substr(Kt,5)===nt?(e=nt,Kt+=5):(e=R,0===ne&&i(it)),e===R&&(t.substr(Kt,4)===rt?(e=rt,Kt+=4):(e=R,0===ne&&i(ot)),e===R&&(t.substr(Kt,3)===at?(e=at,Kt+=3):(e=R,0===ne&&i(st)),e===R&&(t.substr(Kt,5)===ht?(e=ht,Kt+=5):(e=R,0===ne&&i(pt)),e===R&&(t.substr(Kt,4)===ut?(e=ut,Kt+=4):(e=R,0===ne&&i(lt)),e===R&&(e=g()))))),e}function g(){var e,n,r,o,a,s;return e=Kt,t.substr(Kt,4)===ct?(n=ct,Kt+=4):(n=R,0===ne&&i(ft)),n!==R?(r=x(),r!==R?(o=d(),o!==R?(a=x(),a!==R?(s=d(),s!==R?(n=[n,r,o,a,s],e=n):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C)):(Kt=e,e=C),e}function m(){var e;return 120===t.charCodeAt(Kt)?(e=dt,Kt++):(e=R,0===ne&&i(gt)),e===R&&(121===t.charCodeAt(Kt)?(e=mt,Kt++):(e=R,0===ne&&i(vt)),e===R&&(122===t.charCodeAt(Kt)?(e=zt,Kt++):(e=R,0===ne&&i(kt)),e===R&&(t.substr(Kt,2)===yt?(e=yt,Kt+=2):(e=R,0===ne&&i(xt)),e===R&&(t.substr(Kt,2)===Tt?(e=Tt,Kt+=2):(e=R,0===ne&&i(Et)),e===R&&(t.substr(Kt,2)===bt?(e=bt,Kt+=2):(e=R,0===ne&&i(Mt)),e===R&&(115===t.charCodeAt(Kt)?(e=At,Kt++):(e=R,0===ne&&i(Rt)),e===R&&(116===t.charCodeAt(Kt)?(e=St,Kt++):(e=R,0===ne&&i(wt)),e===R&&(t.substr(Kt,14)===Ct?(e=Ct,Kt+=14):(e=R,0===ne&&i(It)))))))))),e}function v(){var t,e;if(t=[],e=z(),e!==R)for(;e!==R;)t.push(e),e=z();else t=C;return t}function z(){var t,e,n;if(t=Kt,e=[],n=k(),n!==R)for(;n!==R;)e.push(n),n=k();else e=C;return e!==R?(n=T(),n!==R?(Jt=t,e=Pt(e),t=e):(Kt=t,t=C)):(Kt=t,t=C),t}function k(){var t,e,n;return t=Kt,e=y(),e!==R?(n=x(),n===R&&(n=Ut),n!==R?(Jt=t,e=et(e),t=e):(Kt=t,t=C)):(Kt=t,t=C),t}function y(){var e,n,r,o,a,s,h,p;if(e=Kt,n=Kt,45===t.charCodeAt(Kt)?(r=_t,Kt++):(r=R,0===ne&&i(Lt)),r===R&&(r=Ut),r!==R){if(o=[],Bt.test(t.charAt(Kt))?(a=t.charAt(Kt),Kt++):(a=R,0===ne&&i(Nt)),a!==R)for(;a!==R;)o.push(a),Bt.test(t.charAt(Kt))?(a=t.charAt(Kt),Kt++):(a=R,0===ne&&i(Nt));else o=C;if(o!==R){if(a=Kt,46===t.charCodeAt(Kt)?(s=Dt,Kt++):(s=R,0===ne&&i(Ft)),s!==R){for(h=[],Bt.test(t.charAt(Kt))?(p=t.charAt(Kt),Kt++):(p=R,0===ne&&i(Nt));p!==R;)h.push(p),Bt.test(t.charAt(Kt))?(p=t.charAt(Kt),Kt++):(p=R,0===ne&&i(Nt));h!==R?(s=[s,h],a=s):(Kt=a,a=C)}else Kt=a,a=C;a===R&&(a=Ut),a!==R?(r=[r,o,a],n=r):(Kt=n,n=C)}else Kt=n,n=C}else Kt=n,n=C;return n!==R&&(Jt=e,n=Ot(n)),e=n}function x(){var e,n;if(e=[],Vt.test(t.charAt(Kt))?(n=t.charAt(Kt),Kt++):(n=R,0===ne&&i(Ht)),n!==R)for(;n!==R;)e.push(n),Vt.test(t.charAt(Kt))?(n=t.charAt(Kt),Kt++):(n=R,0===ne&&i(Ht));else e=C;return e}function T(){var e,n;return e=Kt,t.substr(Kt,2)===Gt?(n=Gt,Kt+=2):(n=R,0===ne&&i(jt)),n===R&&(10===t.charCodeAt(Kt)?(n=Xt,Kt++):(n=R,0===ne&&i(Yt)),n===R&&(13===t.charCodeAt(Kt)?(n=qt,Kt++):(n=R,0===ne&&i(Wt)))),n!==R&&(Jt=e,n=Zt()),e=n}function E(t){var e="";return t.forEach(function(t){null!=t&&(e=e.concat("string"==typeof t?t:E(t)))}),e}function b(t){var e=oe[ae].properties;if("vertex_indices"==e[0])for(var n=t[0],i=2;n>i;i++){var r=t[1],o=t[i],a=t[i+1];re.addTriangle(r,o,a)}else{var s=pkzo.vec3(0),h=pkzo.vec3(0),p=pkzo.vec2(0);e.forEach(function(e,n){switch(e){case"x":s[0]=t[n];break;case"y":s[1]=t[n];break;case"z":s[2]=t[n];break;case"nx":h[0]=t[n];break;case"ny":h[1]=t[n];break;case"nz":h[2]=t[n];break;case"t":p[0]=t[n];break;case"s":p[1]=t[n]}}),re.addVertex(s,h,p)}se++,se==oe[ae].count&&(ae++,se=0)}var M,A=arguments.length>1?arguments[1]:{},R={},S={ply:o},w=o,C=R,I="ply",P={type:"literal",value:"ply",description:'"ply"'},U="end_header",_={type:"literal",value:"end_header",description:'"end_header"'},L="format",B={type:"literal",value:"format",description:'"format"'},N="ascii",D={type:"literal",value:"ascii",description:'"ascii"'},F="1.0",O={type:"literal",value:"1.0",description:'"1.0"'},V="comment",H={type:"literal",value:"comment",description:'"comment"'},G=/^[^\n\r]/,j={type:"class",value:"[^\\n\\r]",description:"[^\\n\\r]"},X=function(t,e){t.properties=e,oe.push(t)},Y="element",q={type:"literal",value:"element",description:'"element"'},W=function(t,e){return{type:t,count:e}},Z="vertex",K={type:"literal",value:"vertex",description:'"vertex"'},J="face",Q={type:"literal",value:"face",description:'"face"'},$="property",tt={type:"literal",value:"property",description:'"property"'},et=function(t){return t},nt="float",it={type:"literal",value:"float",description:'"float"'},rt="uint",ot={type:"literal",value:"uint",description:'"uint"'},at="int",st={type:"literal",value:"int",description:'"int"'},ht="uchar",pt={type:"literal",value:"uchar",description:'"uchar"'},ut="char",lt={type:"literal",value:"char",description:'"char"'},ct="list",ft={type:"literal",value:"list",description:'"list"'},dt="x",gt={type:"literal",value:"x",description:'"x"'},mt="y",vt={type:"literal",value:"y",description:'"y"'},zt="z",kt={type:"literal",value:"z",description:'"z"'},yt="nx",xt={type:"literal",value:"nx",description:'"nx"'},Tt="ny",Et={type:"literal",value:"ny",description:'"ny"'},bt="nz",Mt={type:"literal",value:"nz",description:'"nz"'},At="s",Rt={type:"literal",value:"s",description:'"s"'},St="t",wt={type:"literal",value:"t",description:'"t"'},Ct="vertex_indices",It={type:"literal",value:"vertex_indices",description:'"vertex_indices"'},Pt=function(t){b(t)},Ut=null,_t="-",Lt={type:"literal",value:"-",description:'"-"'},Bt=/^[0-9]/,Nt={type:"class",value:"[0-9]",description:"[0-9]"},Dt=".",Ft={type:"literal",value:".",description:'"."'},Ot=function(t){return parseFloat(E(t))},Vt=/^[ \t\x0B]/,Ht={type:"class",value:"[ \\t\\x0B]",description:"[ \\t\\x0B]"},Gt="\r\n",jt={type:"literal",value:"\r\n",description:'"\\r\\n"'
},Xt="\n",Yt={type:"literal",value:"\n",description:'"\\n"'},qt="\r",Wt={type:"literal",value:"\r",description:'"\\r"'},Zt=function(){ie++},Kt=0,Jt=0,Qt=0,$t={line:1,column:1,seenCR:!1},te=0,ee=[],ne=0;if("startRule"in A){if(!(A.startRule in S))throw new Error("Can't start parsing from rule \""+A.startRule+'".');w=S[A.startRule]}var ie=0,re=A.mesh,oe=[],ae=0,se=0;if(M=w(),M!==R&&Kt===t.length)return M;throw M!==R&&Kt<t.length&&i({type:"end",description:"end of input"}),r(null,ee,te)}return t(e,Error),{SyntaxError:e,parse:n}}(),pkzo.Mesh=function(){this.loaded=!1},pkzo.Mesh.load=function(t){var e=new pkzo.Mesh,n=new XMLHttpRequest;return n.onreadystatechange=function(){if(4==n.readyState&&200==n.status){var t=pkzo.PlyParser;t.parse(n.responseText,{mesh:e}),e.loaded=!0}},n.open("GET",t,!0),n.send(),e},pkzo.Mesh.plane=function(t,e,n,i){var r=new pkzo.Mesh;if(void 0===n)var n=1;if(void 0===i)var i=1;for(var o=t/2,a=e/2,s=t/n,h=e/i,p=0;n>=p;p++)for(var u=0;i>=u;u++){var l=-o+p*s,c=-a+u*h,f=p,d=u;r.addVertex(pkzo.vec3(l,c,0),pkzo.vec3(0,0,1),pkzo.vec2(f,d),pkzo.vec3(0,1,0))}for(var g=n+1,p=0;n>p;p++)for(var u=0;i>u;u++){var m=(p+0)*g+(u+0),v=(p+0)*g+(u+1),z=(p+1)*g+(u+1),k=(p+1)*g+(u+0);r.addTriangle(m,v,z),r.addTriangle(z,k,m)}return r.loaded=!0,r},pkzo.Mesh.box=function(t){var e=new pkzo.Mesh;return e.vertices=[t[0],t[1],t[2],-t[0],t[1],t[2],-t[0],-t[1],t[2],t[0],-t[1],t[2],t[0],t[1],t[2],t[0],-t[1],t[2],t[0],-t[1],-t[2],t[0],t[1],-t[2],t[0],t[1],t[2],t[0],t[1],-t[2],-t[0],t[1],-t[2],-t[0],t[1],t[2],-t[0],t[1],t[2],-t[0],t[1],-t[2],-t[0],-t[1],-t[2],-t[0],-t[1],t[2],-t[0],-t[1],-t[2],t[0],-t[1],-t[2],t[0],-t[1],t[2],-t[0],-t[1],t[2],t[0],-t[1],-t[2],-t[0],-t[1],-t[2],-t[0],t[1],-t[2],t[0],t[1],-t[2]],e.normals=[0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1],e.texCoords=[1,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1],e.indices=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23],e.loaded=!0,e},pkzo.Mesh.sphere=function(t,e,n){var i=new pkzo.Mesh,r=n+1,o=pkzo.radians(180/r),a=pkzo.radians(360/e);i.addVertex(pkzo.vec3(0,0,t),pkzo.vec3(0,0,1),pkzo.vec2(.5,0),pkzo.vec3(0,1,0)),i.addVertex(pkzo.vec3(0,0,-t),pkzo.vec3(0,0,-1),pkzo.vec2(.5,1),pkzo.vec3(0,1,0));for(var s=(2*Math.PI,1);r>s;s++)for(var h=Math.abs(t*Math.sin(s*o)),p=t*Math.cos(s*o),u=0;e>=u;u++){var l=h*Math.cos(u*a),c=h*Math.sin(u*a),f=pkzo.vec3(l,c,p),d=pkzo.normalize(f),g=pkzo.vec2(u/e,s/r),m=pkzo.cross(d,pkzo.vec3(0,0,1));i.addVertex(f,d,g,m)}for(var v=2+(e+1)*(r-2),u=0;e>u;u++)i.addTriangle(0,2+u,2+u+1),i.addTriangle(1,v+u,v+u+1);for(var s=1;r-1>s;s++)for(var u=0;e>u;u++){var z=2+(s-1)*(e+1)+u,k=z+1,y=2+s*(e+1)+u,x=y+1;i.addTriangle(z,k,x),i.addTriangle(x,y,z)}return i.loaded=!0,i},pkzo.Mesh.icoSphere=function(t,e){for(var n=(1+Math.sqrt(5))/2,i=[pkzo.vec3(-1,n,0),pkzo.vec3(1,n,0),pkzo.vec3(-1,-n,0),pkzo.vec3(1,-n,0),pkzo.vec3(0,-1,n),pkzo.vec3(0,1,n),pkzo.vec3(0,-1,-n),pkzo.vec3(0,1,-n),pkzo.vec3(n,0,-1),pkzo.vec3(n,0,1),pkzo.vec3(-n,0,-1),pkzo.vec3(-n,0,1)],r=0;r<i.length;r++)i[r]=pkzo.normalize(i[r]);for(var o=[[0,11,5],[0,5,1],[0,1,7],[0,7,10],[0,10,11],[1,5,9],[5,11,4],[11,10,2],[10,7,6],[7,1,8],[3,9,4],[3,4,2],[3,2,6],[3,6,8],[3,8,9],[4,9,5],[2,4,11],[6,2,10],[8,6,7],[9,8,1]],a=[],s=function(t,e,n){a.push({p1:t,p2:e,i:n})},h=function(t,e){for(var n=0;n<a.length;n++)if(a.p1==t&&a.p2==e)return a.i;return null},p=function(t,e){var n=e>t?t:e,r=e>t?e:t,o=h(n,r);if(null!=o)return o;var a=i[t],p=i[e],u=pkzo.normalize(pkzo.add(a,p));i.push(u);var l=i.length-1;return s(n,r,l),l},r=0;e>r;r++){var u=[];o.forEach(function(t){var e=p(t[0],t[1]),n=p(t[1],t[2]),i=p(t[2],t[0]);u.push([t[0],e,i]),u.push([t[1],n,e]),u.push([t[2],i,n]),u.push([e,n,i])}),o=u}var l=new pkzo.Mesh,c=2*Math.PI;return i.forEach(function(e){var n=pkzo.svmult(e,t),i=e,r=pkzo.vec2(Math.atan(e[1]/e[0])/c,Math.acos(e[2])/c),o=pkzo.cross(i,pkzo.vec3(0,0,1));l.addVertex(n,i,r,o)}),o.forEach(function(t){l.addTriangle(t[0],t[1],t[2])}),l.loaded=!0,l},pkzo.Mesh.prototype.addVertex=function(t,e,n,i){this.vertices?this.vertices.push(t[0],t[1],t[2]):this.vertices=[t[0],t[1],t[2]],this.normals?this.normals.push(e[0],e[1],e[2]):this.normals=[e[0],e[1],e[2]],this.texCoords?this.texCoords.push(n[0],n[1]):this.texCoords=[n[0],n[1]],void 0!==i&&(this.tangents?this.tangents.push(i[0],i[1],i[2]):this.tangents=[i[0],i[1],i[2]])},pkzo.Mesh.prototype.getVertex=function(t){return pkzo.vec3(this.vertices[3*t],this.vertices[3*t+1],this.vertices[3*t+2])},pkzo.Mesh.prototype.getNormal=function(t){return pkzo.vec3(this.normals[3*t],this.normals[3*t+1],this.normals[3*t+2])},pkzo.Mesh.prototype.getTexCoord=function(t){return pkzo.vec2(this.texCoords[2*t],this.texCoords[2*t+1])},pkzo.Mesh.prototype.addTriangle=function(t,e,n){this.indices?this.indices.push(t,e,n):this.indices=[t,e,n]},pkzo.Mesh.prototype.upload=function(t){this.tangents||this.computeTangents(),this.vertexBuffer=new pkzo.Buffer(t,this.vertices,t.ARRAY_BUFFER,t.FLOAT),this.normalBuffer=new pkzo.Buffer(t,this.normals,t.ARRAY_BUFFER,t.FLOAT),this.texCoordBuffer=new pkzo.Buffer(t,this.texCoords,t.ARRAY_BUFFER,t.FLOAT),this.tangentsBuffer=new pkzo.Buffer(t,this.tangents,t.ARRAY_BUFFER,t.FLOAT),this.indexBuffer=new pkzo.Buffer(t,this.indices,t.ELEMENT_ARRAY_BUFFER,t.UNSIGNED_SHORT)},pkzo.Mesh.prototype.draw=function(t,e){this.loaded&&(this.vertexBuffer||this.upload(t),e.setArrtibute("aVertex",this.vertexBuffer,3),e.setArrtibute("aNormal",this.normalBuffer,3),e.setArrtibute("aTexCoord",this.texCoordBuffer,2),e.setArrtibute("aTangent",this.tangentsBuffer,3),this.indexBuffer.draw(t.TRIANGLES))},pkzo.Mesh.prototype.release=function(){this.vertexBuffer.release(),delete this.vertexBuffer,this.normalBuffer.release(),delete this.normalBuffer,this.texCoordBuffer.release(),delete this.texCoordBuffer,this.indexBuffer.release(),delete this.indexBuffer},pkzo.Mesh.prototype.computeTangents=function(){for(var t=this.vertices.length/3,e=this.indices.length/3,n=new Array(t),i=new Array(t),r=0;t>r;r++)n[r]=pkzo.vec3(0),i[r]=pkzo.vec3(0);for(var r=0;e>r;r++){var o=this.indices[3*r],a=this.indices[3*r+1],s=this.indices[3*r+2],h=this.getVertex(o),p=this.getVertex(a),u=this.getVertex(s),l=this.getTexCoord(o),c=this.getTexCoord(a),f=this.getTexCoord(s),d=p[0]-h[0],g=u[0]-h[0],m=p[1]-h[1],v=u[1]-h[1],z=p[2]-h[2],k=u[2]-h[2],y=c[0]-l[0],x=f[0]-l[0],T=c[1]-l[1],E=f[1]-l[1],b=1/(y*E-x*T),M=pkzo.vec3((E*d-T*g)*b,(E*m-T*v)*b,(E*z-T*k)*b),A=pkzo.vec3((y*g-x*d)*b,(y*v-x*m)*b,(y*k-x*z)*b);n[o]=pkzo.add(n[o],M),n[a]=pkzo.add(n[a],M),n[s]=pkzo.add(n[s],M),i[o]=pkzo.add(i[o],A),i[a]=pkzo.add(i[a],A),i[s]=pkzo.add(i[s],A)}this.tangents=[];for(var R=0;t>R;R++){var S=this.getNormal(R),w=n[R],C=pkzo.normalize(pkzo.svmult(pkzo.sub(w,S),pkzo.dot(S,w)));pkzo.dot(pkzo.cross(S,w),i[R])<0?this.tangents.push(-C[0],-C[1],-C[2]):this.tangents.push(C[0],C[1],C[2])}},pkzo.Material=function(t){this.color=pkzo.vec3(1,1,1),this.roughness=1,t&&this.read(t)},pkzo.Material.load=function(t){var e=new pkzo.Material;return http.get(t,function(n,i){200==n?e.read(JSON.parse(i)):console.error("Failed to load material %s.",t)}),e},pkzo.Material.prototype.read=function(t){t.color&&(this.color=t.color),t.texture&&(this.texture=pkzo.Texture.load(t.texture)),t.roughness&&(this.roughness=t.roughness),t.roughnessMap&&(this.roughnessMap=pkzo.Texture.load(t.roughnessMap)),t.normalMap&&(this.normalMap=pkzo.Texture.load(t.normalMap))},pkzo.Material.prototype.setup=function(t,e){e.setUniform3fv("uColor",this.color),this.texture&&this.texture.loaded?(e.setUniform1i("uHasTexture",1),this.texture.bind(t,0),e.setUniform1i("uTexture",0)):e.setUniform1i("uHasTexture",0),e.setUniform1f("uRoughness",this.roughness),this.roughnessMap&&this.roughnessMap.loaded?(e.setUniform1i("uHasRoughnessMap",1),this.roughnessMap.bind(t,1),e.setUniform1i("uRoughnessMap",1)):e.setUniform1i("uHasRoughnessMap",0),this.normalMap&&this.normalMap.loaded?(e.setUniform1i("uHasNormalMap",1),this.normalMap.bind(t,2),e.setUniform1i("uNormalMap",2)):e.setUniform1i("uHasNormalMap",0)},pkzo.Entity=function(){this.transform=pkzo.mat4(1)},pkzo.Entity.prototype.translate=function(t,e,n){this.transform=pkzo.translate(this.transform,t,e,n)},pkzo.Entity.prototype.rotate=function(t,e,n,i){this.transform=pkzo.rotate(this.transform,t,e,n,i)},pkzo.Entity.prototype.getXVector=function(){return pkzo.vec3(this.transform[0],this.transform[1],this.transform[2])},pkzo.Entity.prototype.getYVector=function(){return pkzo.vec3(this.transform[4],this.transform[5],this.transform[6])},pkzo.Entity.prototype.getZVector=function(){return pkzo.vec3(this.transform[8],this.transform[9],this.transform[10])},pkzo.Entity.prototype.getPosition=function(){return pkzo.vec3(this.transform[12],this.transform[13],this.transform[14])},pkzo.Entity.prototype.getWorldPosition=function(){return this.parent?pkzo.add(this.parent.getWorldPosition(),this.getPosition()):this.getPosition()},pkzo.Entity.prototype.setPosition=function(t){this.transform[12]=t[0],this.transform[13]=t[1],this.transform[14]=t[2]},pkzo.Entity.prototype.lookAt=function(t,e){var n=this.getPosition(),i=pkzo.normalize(pkzo.sub(t,n)),r=pkzo.normalize(pkzo.cross(i,e)),o=pkzo.normalize(pkzo.cross(r,i));this.transform[0]=r[0],this.transform[1]=r[1],this.transform[2]=r[2],this.transform[4]=o[0],this.transform[5]=o[1],this.transform[6]=o[2],this.transform[8]=i[0],this.transform[9]=i[1],this.transform[10]=i[2]},pkzo.Camera=function(t){pkzo.Entity.call(this);var e=t?t:{};this.yfov=e.yfov?e.yfov:45,this.znear=e.znear?e.znear:.1,this.zfar=e.zfar?e.zfar:100},pkzo.Camera.prototype=Object.create(pkzo.Entity.prototype),pkzo.Camera.prototype.constructor=pkzo.Camera,pkzo.Camera.prototype.enqueue=function(t){var e=t.canvas.gl.width/t.canvas.gl.height,n=pkzo.perspective(this.yfov,e,this.znear,this.zfar),i=this.getPosition(),r=this.getXVector(),o=this.getYVector(),a=this.getZVector(),s=pkzo.mat4([r[0],r[1],r[2],0,o[0],o[1],o[2],0,a[0],a[1],a[2],0,0,0,0,1]);s=pkzo.transpose(s),s=pkzo.translate(s,-i[0],-i[1],-i[2]),t.setCamera(n,s)},pkzo.Object=function(t,e){pkzo.Entity.call(this),this.mesh=t,this.material=e},pkzo.Object.prototype=Object.create(pkzo.Entity.prototype),pkzo.Object.prototype.constructor=pkzo.Object,pkzo.Object.prototype.enqueue=function(t){t.addMesh(this.transform,this.material,this.mesh)},pkzo.Object.prototype.draw=function(t,e,n){var i=pkzo.multMatrix(n,this.transform);e.setUniformMatrix4fv("uModelViewMatrix",i),e.setUniformMatrix4fv("uModelMatrix",this.transform),this.material.setup(t,e),this.mesh.draw(t,e)},pkzo.DirectionalLight=function(){pkzo.Entity.call(this),this.color=pkzo.vec3(.5,.5,.5)},pkzo.DirectionalLight.prototype=Object.create(pkzo.Entity.prototype),pkzo.DirectionalLight.prototype.constructor=pkzo.DirectionalLight,pkzo.DirectionalLight.prototype.enqueue=function(t){var e=pkzo.neg(this.getZVector());t.addDirectionalLight(e,this.color)},pkzo.PointLight=function(){pkzo.Entity.call(this),this.color=pkzo.vec3(.5,.5,.5),this.range=10},pkzo.PointLight.prototype=Object.create(pkzo.Entity.prototype),pkzo.PointLight.prototype.constructor=pkzo.PointLight,pkzo.PointLight.prototype.enqueue=function(t){t.addPointLight(this.getPosition(),this.color,this.range)},pkzo.SpotLight=function(){pkzo.Entity.call(this),this.color=pkzo.vec3(.5,.5,.5),this.range=10,this.cutoff=25},pkzo.SpotLight.prototype=Object.create(pkzo.Entity.prototype),pkzo.SpotLight.prototype.constructor=pkzo.SpotLight,pkzo.SpotLight.prototype.enqueue=function(t){var e=pkzo.neg(this.getZVector());t.addSpotLight(this.getPosition(),e,this.color,this.range,this.cutoff)},pkzo.SkyBox=function(t){pkzo.Entity.call(this),this.cubeMap=t},pkzo.SkyBox.prototype=Object.create(pkzo.Entity.prototype),pkzo.SkyBox.prototype.constructor=pkzo.SkyBox,pkzo.SkyBox.prototype.enqueue=function(t){this.cubeMap.loaded&&t.addSkyBox(this.cubeMap)},pkzo.EntityGroup=function(){pkzo.Entity.call(this)},pkzo.EntityGroup.prototype=Object.create(pkzo.Entity.prototype),pkzo.EntityGroup.prototype.constructor=pkzo.EntityGroup,pkzo.EntityGroup.add=function(t){this.children?(t.parent=this,this.children.push(t)):this.children=[t]},pkzo.EntityGroup.prototype.enqueue=function(t){this.children&&this.childrean.forEach(function(e){e.enqueue(t)})},pkzo.Particle=function(t){pkzo.Entity.call(this);for(var e in t)this[e]=t[e]},pkzo.Particle.prototype=Object.create(pkzo.Entity.prototype),pkzo.Particle.prototype.constructor=pkzo.Particle,pkzo.Particle.prototype.enqueue=function(t){this.texture.loaded&&t.addParticle(this.getWorldPosition(),this.size,this.texture,this.color,this.transparency)},pkzo.ParticleSystem=function(t){pkzo.Entity.call(this);for(var e in t)this[e]=t[e];this.lastSpawn=Date.now(),this.spawnTime=1e3*this.lifetime/this.count,this.particles=[]},pkzo.ParticleSystem.prototype=Object.create(pkzo.Entity.prototype),pkzo.ParticleSystem.prototype.constructor=pkzo.ParticleSystem,pkzo.ParticleSystem.prototype.animate=function(){var t=Date.now();if(t>this.lastSpawn+this.spawnTime){var e=new pkzo.Particle({created:t,texture:this.texture,color:this.color,transparency:this.transparency,size:this.size,lifetime:this.lifetime});e.parent=this,this.onSpawn&&this.onSpawn(e),this.particles.push(e),this.lastSpawn=t}for(var n=0;n<this.particles.length;){var e=this.particles[n];t>e.created+1e3*e.lifetime?this.particles.splice(n,1):n++}this.onUpdate&&this.particles.forEach(function(t){this.onUpdate(t)},this)},pkzo.ParticleSystem.prototype.enqueue=function(t){this.animate(),this.particles.forEach(function(e){e.enqueue(t)})},pkzo.Renderer=function(t){this.canvas=new pkzo.Canvas(t);var e=this;this.canvas.init(function(t){e.sykBoxShader=new pkzo.Shader(t,pkzo.Inverse+pkzo.Transpose+pkzo.SkyBoxVert,pkzo.SkyBoxFrag),e.ambientShader=new pkzo.Shader(t,pkzo.SolidVert,pkzo.AmbientFrag),e.lightShader=new pkzo.Shader(t,pkzo.SolidVert,pkzo.LightFrag),e.particleShader=new pkzo.Shader(t,pkzo.ParticleVert,pkzo.ParticleFrag),e.screenPlane=pkzo.Mesh.plane(2,2)})},pkzo.Renderer.prototype.setCamera=function(t,e){this.projectionMatrix=t,this.viewMatrix=e},pkzo.Renderer.prototype.addMesh=function(t,e,n){this.solids.push({transform:t,material:e,mesh:n})},pkzo.Renderer.prototype.addSkyBox=function(t){this.skyBox=t},pkzo.DIRECTIONAL_LIGHT=1,pkzo.POINT_LIGHT=2,pkzo.SPOT_LIGHT=3,pkzo.Renderer.prototype.addDirectionalLight=function(t,e){this.lights.push({type:pkzo.DIRECTIONAL_LIGHT,direction:t,color:e})},pkzo.Renderer.prototype.addPointLight=function(t,e,n){this.lights.push({type:pkzo.POINT_LIGHT,position:t,color:e,range:n})},pkzo.Renderer.prototype.addSpotLight=function(t,e,n,i,r){this.lights.push({type:pkzo.SPOT_LIGHT,position:t,direction:e,color:n,range:i,cutoff:r})},pkzo.Renderer.prototype.addParticle=function(t,e,n,i,r){this.particles.push({position:t,size:e,texture:n,color:i,transparency:r})},pkzo.Renderer.prototype.drawSkyBox=function(t){if(this.skyBox){var e=this.sykBoxShader;e.bind(),e.setUniformMatrix4fv("uProjectionMatrix",this.projectionMatrix),e.setUniformMatrix4fv("uViewMatrix",this.viewMatrix),this.skyBox.bind(t,0),e.setUniform1i("uCubemap",0),this.screenPlane.draw(t,e)}},pkzo.Renderer.prototype.drawSolids=function(t,e){this.solids.forEach(function(n){var i=pkzo.multMatrix(pkzo.mat3(this.viewMatrix),pkzo.mat3(n.transform));e.setUniformMatrix4fv("uModelMatrix",n.transform),e.setUniformMatrix3fv("uNormalMatrix",i),n.material.setup(t,e),n.mesh.draw(t,e)})},pkzo.Renderer.prototype.ambientPass=function(t,e){var n=this.ambientShader;n.bind(),n.setUniformMatrix4fv("uProjectionMatrix",this.projectionMatrix),n.setUniformMatrix4fv("uViewMatrix",this.viewMatrix),n.setUniform3fv("uAmbientLight",e),this.drawSolids(t,n)},pkzo.Renderer.prototype.lightPass=function(t,e){var n=this.lightShader;n.bind(),n.setUniformMatrix4fv("uProjectionMatrix",this.projectionMatrix),n.setUniformMatrix4fv("uViewMatrix",this.viewMatrix),n.setUniform1i("uLightType",e.type),e.direction&&n.setUniform3fv("uLightDirection",e.direction),e.position&&n.setUniform3fv("uLightPosition",e.position),e.range&&n.setUniform1f("uLightRange",e.range),e.cutoff&&n.setUniform1f("uLightCutoff",e.cutoff),n.setUniform3fv("uLightColor",e.color),this.drawSolids(t,n)},pkzo.Renderer.prototype.drawParticles=function(t){var e=this.particleShader;e.bind(),e.setUniformMatrix4fv("uProjectionMatrix",this.projectionMatrix),e.setUniformMatrix4fv("uViewMatrix",this.viewMatrix),this.particles.forEach(function(n){var i=pkzo.mat4();i=pkzo.translate(i,n.position[0],n.position[1],n.position[2]),e.setUniformMatrix4fv("uModelMatrix",i),e.setUniform3fv("uColor",n.color),e.setUniform1f("uSize",.5*n.size),e.setUniform1f("uTransparency",n.transparency),n.texture&&n.texture.loaded?(e.setUniform1i("uHasTexture",1),n.texture.bind(t,0),e.setUniform1i("uTexture",0)):e.setUniform1i("uHasTexture",0),this.screenPlane.draw(t,e)},this)},pkzo.Renderer.prototype.render=function(t){var e=this;this.solids=[],this.lights=[],this.skyBox=null,this.particles=[],t.enqueue(this),this.canvas.draw(function(n){n.disable(n.BLEND),n.depthMask(!1),n.disable(n.DEPTH_TEST),e.drawSkyBox(n),n.depthMask(!0),n.enable(n.DEPTH_TEST),n.depthFunc(n.LEQUAL),e.ambientPass(n,t.ambientLight),n.enable(n.BLEND),n.blendFunc(n.ONE,n.ONE),e.lights.forEach(function(t){e.lightPass(n,t)}),n.depthMask(!1),n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),e.drawParticles(n)})};
//# sourceMappingURL=data:application/json;base64,